service: aws-node-project
frameworkVersion: '3'

package:
  individually: true

plugins:
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-common-excludes # this should go before serverless-plugin-include-dependencies
  - serverless-plugin-include-dependencies

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        # Allow functions to list all buckets
        - Effect: Allow
          Action: 's3:ListBucket'
          Resource: '*'
        # Allow functions to read/write objects in a bucket
        - Effect: Allow
          Action:
            - 's3:GetObject'
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::my-bucket-name/*'

functions:
  getProductsById:
    handler: handlers/products/get.get
    memorySize: 256
    url: true
    # adding the following:
    role: DynamoDBLambdaAccessRole
    environment:
      STOCK_TABLE: !Ref StockDynamoDbTable
      PRODUCT_TABLE: !Ref ProductDynamoDbTable
    events:
      - httpApi:
          path: /products/{id}
          method: get
  getProductList:
    handler: handlers/products/list.list
    url: true
    memorySize: 256
    # adding the following:
    role: DynamoDBLambdaAccessRole
    environment:
      STOCK_TABLE: !Ref StockDynamoDbTable
      PRODUCT_TABLE: !Ref ProductDynamoDbTable
    events: 
        - httpApi: 
            path: /products
            method: get
  createProduct:
    handler: handlers/products/create.create
    url: true
    memorySize: 256
    # adding the following:
    role: DynamoDBLambdaAccessRole
    environment:
      STOCK_TABLE: !Ref StockDynamoDbTable
      PRODUCT_TABLE: !Ref ProductDynamoDbTable
    events:
        - httpApi: 
            path: /products
            method: post
resources:
  Resources:
    StockDynamoDbTable: 
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: stocks
    ProductDynamoDbTable: 
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: products
    DynamoDBLambdaAccessRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
          - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        Policies:
          - PolicyName: dynamodb
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:BatchGetItem'
                    - 'dynamodb:BatchWriteItem'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:DeleteItem'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:Scan'
                    - 'dynamodb:Query'
                    - 'dynamodb:UpdateItem'
                    - 'dynamodb:PartiQL*'
                  Resource:
                    - !GetAtt StockDynamoDbTable.Arn
                    - !Sub
                      - ${Table}/*
                      - Table: !GetAtt StockDynamoDbTable.Arn
                    - !GetAtt ProductDynamoDbTable.Arn
                    - !Sub
                      - ${Table}/*
                      - Table: !GetAtt ProductDynamoDbTable.Arn